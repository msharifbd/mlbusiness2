{
  "hash": "11446bde0a24109efcd447e00bb465bb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"<center> Exploratory Data Analysis in Python\"\nformat: \n  html: \n    toc: true\n    toc-title: Table of Contents \n    toc-depth: 5\n    number-sections: true\n    mainfont: emoji\nengine: knitr\n---\n\n\n\n\n\n\n\n# Introduction \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The objective of this document is to introduce the necessary functions from `pandas` library in `Python` for data manipulation and `matplotlib` and `seaborn` libraries for data visualization. There are basically six functions - `select()`, `filter()`, `mutate()`, `arrange()`, `group_by()`, and `summarize()` - from `dplyr` package of `tidyverse` ecosystem that are very much necessary for data manipulation. These six functions can be used for 80% of data manipulation problems. In this document, we will compare the above six functions from `dplyr` with the equivalent `pandas` functions. Additionally, this handout also compares some other Python packages, particularly `plotnine` library that can be used to apply `ggplot` in Python.\n\n\n# Loading Necessary Python Packages \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`Python` programming in `RMarkdown` is used to analyse the data. In some cases, the `R Programming`is also used. In this section, the necessary `python` packages/modules are imported. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd # For Data Manipulation\nimport numpy as np # For Data Manipulation\nimport matplotlib.pyplot as plt # For Visualization \n\nimport seaborn as sns # For Visualization \nimport sklearn # For Machine Learning \n\nimport warnings \nwarnings.filterwarnings('ignore')\n\n# Plotnine is a clone of ggplot2 in R\nfrom plotnine import *\n# lets-plot is another clone of ggplot2\n# from lets_plot import *\n```\n:::\n\n\n\n\n\n# Setting/Changing Working Directory \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport os\nos.getcwd()\nos.listdir()\n```\n:::\n\n\n\n\n\n# Importing the Dataset \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Being able to import the dataset into your text editor or IDE such as VS Code or RStudio is an important data analytics skill. Data reside in many places and in many forms. Different kinds of data from different sources need to be imported. For example - you can import a dataset from your local machine or website or database. Sometimes, we need to import data from social media such as Twitter, Youtube and Facebook. Therefore, knowing how to import data from many different sources is a very critical skill of data scientists. \n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Importing Dataset \nproduct = pd.read_csv(\n  \"https://raw.githubusercontent.com/msharifbd/DATA/main/Al-Bundy_raw-data.csv\")\n```\n:::\n\n\n\n\n# Learning About the Metadata \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Metadata is data about data. Once we import a dataset into our text editor, we need to study the dataset very well. For example - we need to know how many features and cases the dataset has. We also need to know the types of the features. Many types the features are not in appropriate type; then, we need to change them into appropriate type. Moreover, we need to check whether the dataset contains missing data and make decision about how to deal with those missing data. To sum up, learning about the metadata is a very important step before you start processing your data.\n\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Metadata of the dataset \nproduct.shape\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(14967, 14)\n```\n\n\n:::\n\n```{.python .cell-code}\nprint('The total number of rows and columns of the product data is \\\n{} and {} respectively.'.format(product.shape[0], product.shape[1]))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nThe total number of rows and columns of the product data is 14967 and 14 respectively.\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.count()[0] # counting the number of rows in the dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<string>:2: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\nnp.int64(14967)\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['InvoiceNo', 'Date', 'Country', 'ProductID', 'Shop', 'Gender',\n       'Size (US)', 'Size (Europe)', 'Size (UK)', 'UnitPrice', 'Discount',\n       'Year', 'Month', 'SalePrice'],\n      dtype='object')\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.dtypes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nInvoiceNo          int64\nDate              object\nCountry           object\nProductID          int64\nShop              object\nGender            object\nSize (US)        float64\nSize (Europe)     object\nSize (UK)        float64\nUnitPrice          int64\nDiscount         float64\nYear               int64\nMonth              int64\nSalePrice        float64\ndtype: object\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   InvoiceNo      Date         Country  ...  Year Month SalePrice\n0      52389  1/1/2014  United Kingdom  ...  2014     1     159.0\n1      52390  1/1/2014   United States  ...  2014     1     159.2\n2      52391  1/1/2014          Canada  ...  2014     1     119.2\n3      52392  1/1/2014   United States  ...  2014     1     159.0\n4      52393  1/1/2014  United Kingdom  ...  2014     1     159.0\n\n[5 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   InvoiceNo      14967 non-null  int64  \n 1   Date           14967 non-null  object \n 2   Country        14967 non-null  object \n 3   ProductID      14967 non-null  int64  \n 4   Shop           14967 non-null  object \n 5   Gender         14967 non-null  object \n 6   Size (US)      14967 non-null  float64\n 7   Size (Europe)  14967 non-null  object \n 8   Size (UK)      14967 non-null  float64\n 9   UnitPrice      14967 non-null  int64  \n 10  Discount       14967 non-null  float64\n 11  Year           14967 non-null  int64  \n 12  Month          14967 non-null  int64  \n 13  SalePrice      14967 non-null  float64\ndtypes: float64(4), int64(5), object(5)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n\n\n\n# Cleaning the Dataset \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Changing the names of the columns to uppercase \nproduct.rename(columns = str.upper, inplace = True)\nproduct.columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['INVOICENO', 'DATE', 'COUNTRY', 'PRODUCTID', 'SHOP', 'GENDER',\n       'SIZE (US)', 'SIZE (EUROPE)', 'SIZE (UK)', 'UNITPRICE', 'DISCOUNT',\n       'YEAR', 'MONTH', 'SALEPRICE'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nnew_column = product.columns \\\n    .str.replace(\"(\", '').str.replace(\")\", \"\") \\\n    .str.replace(' ','_') # Cleaning the names of the variables \nnew_column\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nIndex(['INVOICENO', 'DATE', 'COUNTRY', 'PRODUCTID', 'SHOP', 'GENDER',\n       'SIZE_US', 'SIZE_EUROPE', 'SIZE_UK', 'UNITPRICE', 'DISCOUNT', 'YEAR',\n       'MONTH', 'SALEPRICE'],\n      dtype='object')\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Replacing whitespace in the names of the variables \ncol_name = product.columns.str.replace(' ','_')\nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   INVOICENO      14967 non-null  int64  \n 1   DATE           14967 non-null  object \n 2   COUNTRY        14967 non-null  object \n 3   PRODUCTID      14967 non-null  int64  \n 4   SHOP           14967 non-null  object \n 5   GENDER         14967 non-null  object \n 6   SIZE (US)      14967 non-null  float64\n 7   SIZE (EUROPE)  14967 non-null  object \n 8   SIZE (UK)      14967 non-null  float64\n 9   UNITPRICE      14967 non-null  int64  \n 10  DISCOUNT       14967 non-null  float64\n 11  YEAR           14967 non-null  int64  \n 12  MONTH          14967 non-null  int64  \n 13  SALEPRICE      14967 non-null  float64\ndtypes: float64(4), int64(5), object(5)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.columns = new_column # Changing all column names \nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   INVOICENO    14967 non-null  int64  \n 1   DATE         14967 non-null  object \n 2   COUNTRY      14967 non-null  object \n 3   PRODUCTID    14967 non-null  int64  \n 4   SHOP         14967 non-null  object \n 5   GENDER       14967 non-null  object \n 6   SIZE_US      14967 non-null  float64\n 7   SIZE_EUROPE  14967 non-null  object \n 8   SIZE_UK      14967 non-null  float64\n 9   UNITPRICE    14967 non-null  int64  \n 10  DISCOUNT     14967 non-null  float64\n 11  YEAR         14967 non-null  int64  \n 12  MONTH        14967 non-null  int64  \n 13  SALEPRICE    14967 non-null  float64\ndtypes: float64(4), int64(5), object(5)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   INVOICENO      DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n0      52389  1/1/2014  United Kingdom  ...  2014     1     159.0\n1      52390  1/1/2014   United States  ...  2014     1     159.2\n2      52391  1/1/2014          Canada  ...  2014     1     119.2\n3      52392  1/1/2014   United States  ...  2014     1     159.0\n4      52393  1/1/2014  United Kingdom  ...  2014     1     159.0\n\n[5 rows x 14 columns]\n```\n\n\n:::\n:::\n\n\n\n\n\n## Changing the Types of the Variables \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There are several types of data in Python as it is in R. Table @tbl-table1 lists the data types in python.\n\n\n\n\n\n\n::: {#tbl-table1 .cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n<caption>Types of Data in Python</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Python Data Type </th>\n   <th style=\"text-align:left;\"> Data Nature </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> float64 </td>\n   <td style=\"text-align:left;\"> Real Numbers </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> category </td>\n   <td style=\"text-align:left;\"> cateogries </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> datetime64 </td>\n   <td style=\"text-align:left;\"> Date Times </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> int64 </td>\n   <td style=\"text-align:left;\"> Integers </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> bool </td>\n   <td style=\"text-align:left;\"> True or False </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> string </td>\n   <td style=\"text-align:left;\"> Text </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Changing the DATE variable from object to date\nproduct['DATE'] = pd.to_datetime(product['DATE']) \nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  int64         \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  int64         \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  int64         \n 13  SALEPRICE    14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(4), int64(5), object(4)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# converting integer to object\nproduct.INVOICENO = product.INVOICENO.astype(str) \nproduct[['MONTH', 'PRODUCTID']] = product[['MONTH', 'PRODUCTID']].astype(str) \nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  object        \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  object        \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  object        \n 13  SALEPRICE    14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(4), int64(2), object(7)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n\n\n\n# `Tidyverse` and `Pandas` Eqivalent Functions \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Table @tbl-table2 compares the `tidyverse` and `pandas` equivalent functions. These functions are very much important to perform data analysis in both `R` and `Python`. \n\n\n\n\n\n\n::: {#tbl-table2 .cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n<caption>Tidyverse and Pandas Equivalent Functions</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> tidyverse function </th>\n   <th style=\"text-align:left;\"> pandas function </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> filter () </td>\n   <td style=\"text-align:left;\"> query () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> arrange () </td>\n   <td style=\"text-align:left;\"> sort_values () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> select () </td>\n   <td style=\"text-align:left;\"> filter () or loc () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> rename () </td>\n   <td style=\"text-align:left;\"> rename () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> mutate () </td>\n   <td style=\"text-align:left;\"> assign () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> group_by () </td>\n   <td style=\"text-align:left;\"> groupby () </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> summarize () </td>\n   <td style=\"text-align:left;\"> agg () </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n\n\n## `select ()` Equivalent in Python - Accessing Columns \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nprod2 = product[['YEAR','SALEPRICE', 'DISCOUNT', 'UNITPRICE']]\nprod2.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   YEAR  SALEPRICE  DISCOUNT  UNITPRICE\n0  2014      159.0       0.0        159\n1  2014      159.2       0.2        199\n2  2014      119.2       0.2        149\n3  2014      159.0       0.0        159\n4  2014      159.0       0.0        159\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.loc[:,['YEAR','SALEPRICE', 'DISCOUNT', 'UNITPRICE']]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       YEAR  SALEPRICE  DISCOUNT  UNITPRICE\n0      2014      159.0       0.0        159\n1      2014      159.2       0.2        199\n2      2014      119.2       0.2        149\n3      2014      159.0       0.0        159\n4      2014      159.0       0.0        159\n...     ...        ...       ...        ...\n14962  2016      139.0       0.0        139\n14963  2016      149.0       0.0        149\n14964  2016      125.3       0.3        179\n14965  2016      199.0       0.0        199\n14966  2016      125.1       0.1        139\n\n[14967 rows x 4 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.loc[0:5,['YEAR','SALEPRICE', 'DISCOUNT', 'UNITPRICE']]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   YEAR  SALEPRICE  DISCOUNT  UNITPRICE\n0  2014      159.0       0.0        159\n1  2014      159.2       0.2        199\n2  2014      119.2       0.2        149\n3  2014      159.0       0.0        159\n4  2014      159.0       0.0        159\n5  2014      159.0       0.0        159\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.filter(['YEAR','SALEPRICE', 'DISCOUNT', 'UNITPRICE'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       YEAR  SALEPRICE  DISCOUNT  UNITPRICE\n0      2014      159.0       0.0        159\n1      2014      159.2       0.2        199\n2      2014      119.2       0.2        149\n3      2014      159.0       0.0        159\n4      2014      159.0       0.0        159\n...     ...        ...       ...        ...\n14962  2016      139.0       0.0        139\n14963  2016      149.0       0.0        149\n14964  2016      125.3       0.3        179\n14965  2016      199.0       0.0        199\n14966  2016      125.1       0.1        139\n\n[14967 rows x 4 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Regular Expression (Regex)\nproduct.filter(regex = \"PRICE$\") # Ends with Price \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  SALEPRICE\n0            159      159.0\n1            199      159.2\n2            149      119.2\n3            159      159.0\n4            159      159.0\n...          ...        ...\n14962        139      139.0\n14963        149      149.0\n14964        179      125.3\n14965        199      199.0\n14966        139      125.1\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.filter(regex = \"^SIZE\")  # Starts with SIZE\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       SIZE_US SIZE_EUROPE  SIZE_UK\n0         11.0          44     10.5\n1         11.5       44-45     11.0\n2          9.5       42-43      9.0\n3          9.5          40      7.5\n4          9.0       39-40      7.0\n...        ...         ...      ...\n14962      9.5       42-43      9.0\n14963     12.0       42-43     10.0\n14964     10.5       43-44     10.0\n14965      9.5          40      7.5\n14966      6.5          37      4.5\n\n[14967 rows x 3 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.filter(regex = \"PRICE\")  # Contains the word Price \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  SALEPRICE\n0            159      159.0\n1            199      159.2\n2            149      119.2\n3            159      159.0\n4            159      159.0\n...          ...        ...\n14962        139      139.0\n14963        149      149.0\n14964        179      125.3\n14965        199      199.0\n14966        139      125.1\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.select_dtypes('object')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO         COUNTRY PRODUCTID  SHOP  GENDER SIZE_EUROPE MONTH\n0         52389  United Kingdom      2152   UK2    Male          44     1\n1         52390   United States      2230  US15    Male       44-45     1\n2         52391          Canada      2160  CAN7    Male       42-43     1\n3         52392   United States      2234   US6  Female          40     1\n4         52393  United Kingdom      2222   UK4  Female       39-40     1\n...         ...             ...       ...   ...     ...         ...   ...\n14962     65773  United Kingdom      2154   UK2    Male       42-43    12\n14963     65774   United States      2181  US12  Female       42-43    12\n14964     65775          Canada      2203  CAN6    Male       43-44    12\n14965     65776         Germany      2231  GER1  Female          40    12\n14966     65777         Germany      2156  GER1  Female          37    12\n\n[14967 rows x 7 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.select_dtypes('int')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  YEAR\n0            159  2014\n1            199  2014\n2            149  2014\n3            159  2014\n4            159  2014\n...          ...   ...\n14962        139  2016\n14963        149  2016\n14964        179  2016\n14965        199  2016\n14966        139  2016\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.loc[:,product.columns.str.startswith('SIZE')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       SIZE_US SIZE_EUROPE  SIZE_UK\n0         11.0          44     10.5\n1         11.5       44-45     11.0\n2          9.5       42-43      9.0\n3          9.5          40      7.5\n4          9.0       39-40      7.0\n...        ...         ...      ...\n14962      9.5       42-43      9.0\n14963     12.0       42-43     10.0\n14964     10.5       43-44     10.0\n14965      9.5          40      7.5\n14966      6.5          37      4.5\n\n[14967 rows x 3 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.loc[:,product.columns.str.contains('PRICE')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  SALEPRICE\n0            159      159.0\n1            199      159.2\n2            149      119.2\n3            159      159.0\n4            159      159.0\n...          ...        ...\n14962        139      139.0\n14963        149      149.0\n14964        179      125.3\n14965        199      199.0\n14966        139      125.1\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.loc[:,product.columns.str.endswith('PRICE')]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       UNITPRICE  SALEPRICE\n0            159      159.0\n1            199      159.2\n2            149      119.2\n3            159      159.0\n4            159      159.0\n...          ...        ...\n14962        139      139.0\n14963        149      149.0\n14964        179      125.3\n14965        199      199.0\n14966        139      125.1\n\n[14967 rows x 2 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Dropping some columns \nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  object        \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  object        \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  object        \n 13  SALEPRICE    14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(4), int64(2), object(7)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.drop(columns = ['SIZE_EUROPE', 'SIZE_UK'], axis = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n0         52389 2014-01-01  United Kingdom  ...  2014     1     159.0\n1         52390 2014-01-01   United States  ...  2014     1     159.2\n2         52391 2014-01-01          Canada  ...  2014     1     119.2\n3         52392 2014-01-01   United States  ...  2014     1     159.0\n4         52393 2014-01-01  United Kingdom  ...  2014     1     159.0\n...         ...        ...             ...  ...   ...   ...       ...\n14962     65773 2016-12-31  United Kingdom  ...  2016    12     139.0\n14963     65774 2016-12-31   United States  ...  2016    12     149.0\n14964     65775 2016-12-31          Canada  ...  2016    12     125.3\n14965     65776 2016-12-31         Germany  ...  2016    12     199.0\n14966     65777 2016-12-31         Germany  ...  2016    12     125.1\n\n[14967 rows x 12 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.drop(columns = ['SIZE_EUROPE', 'SIZE_UK'], axis = 1) \\\n    .pipe(lambda x: x.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 12 columns):\n #   Column     Non-Null Count  Dtype         \n---  ------     --------------  -----         \n 0   INVOICENO  14967 non-null  object        \n 1   DATE       14967 non-null  datetime64[ns]\n 2   COUNTRY    14967 non-null  object        \n 3   PRODUCTID  14967 non-null  object        \n 4   SHOP       14967 non-null  object        \n 5   GENDER     14967 non-null  object        \n 6   SIZE_US    14967 non-null  float64       \n 7   UNITPRICE  14967 non-null  int64         \n 8   DISCOUNT   14967 non-null  float64       \n 9   YEAR       14967 non-null  int64         \n 10  MONTH      14967 non-null  object        \n 11  SALEPRICE  14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(3), int64(2), object(6)\nmemory usage: 1.4+ MB\n```\n\n\n:::\n:::\n\n\n\n\n### Rearranging Columns \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Sorting Alphabetically\nproduct.reindex(sorted(product.columns), axis = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              COUNTRY       DATE  DISCOUNT  ... SIZE_US UNITPRICE  YEAR\n0      United Kingdom 2014-01-01       0.0  ...    11.0       159  2014\n1       United States 2014-01-01       0.2  ...    11.5       199  2014\n2              Canada 2014-01-01       0.2  ...     9.5       149  2014\n3       United States 2014-01-01       0.0  ...     9.5       159  2014\n4      United Kingdom 2014-01-01       0.0  ...     9.0       159  2014\n...               ...        ...       ...  ...     ...       ...   ...\n14962  United Kingdom 2016-12-31       0.0  ...     9.5       139  2016\n14963   United States 2016-12-31       0.0  ...    12.0       149  2016\n14964          Canada 2016-12-31       0.3  ...    10.5       179  2016\n14965         Germany 2016-12-31       0.0  ...     9.5       199  2016\n14966         Germany 2016-12-31       0.1  ...     6.5       139  2016\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\n# Sorting As You Want (ASY)\nproduct.columns.to_list()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n['INVOICENO', 'DATE', 'COUNTRY', 'PRODUCTID', 'SHOP', 'GENDER', 'SIZE_US', 'SIZE_EUROPE', 'SIZE_UK', 'UNITPRICE', 'DISCOUNT', 'YEAR', 'MONTH', 'SALEPRICE']\n```\n\n\n:::\n\n```{.python .cell-code}\ncol_first = ['YEAR','MONTH']\ncol_rest = product.columns.difference(col_first, sort=False).to_list()\nproduct2 = product[col_first + col_rest]\nproduct2.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   YEAR         14967 non-null  int64         \n 1   MONTH        14967 non-null  object        \n 2   INVOICENO    14967 non-null  object        \n 3   DATE         14967 non-null  datetime64[ns]\n 4   COUNTRY      14967 non-null  object        \n 5   PRODUCTID    14967 non-null  object        \n 6   SHOP         14967 non-null  object        \n 7   GENDER       14967 non-null  object        \n 8   SIZE_US      14967 non-null  float64       \n 9   SIZE_EUROPE  14967 non-null  object        \n 10  SIZE_UK      14967 non-null  float64       \n 11  UNITPRICE    14967 non-null  int64         \n 12  DISCOUNT     14967 non-null  float64       \n 13  SALEPRICE    14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(4), int64(2), object(7)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n\n\n\n\n## `filter ()` Equivalent in Python - Accessing Rows \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  object        \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  object        \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  object        \n 13  SALEPRICE    14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(4), int64(2), object(7)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.COUNTRY.value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCOUNTRY\nUnited States     5886\nGermany           4392\nCanada            2952\nUnited Kingdom    1737\nName: count, dtype: int64\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct['YEAR'].unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\narray([2014, 2015, 2016])\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct['YEAR'].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nYEAR\n2016    7366\n2015    4848\n2014    2753\nName: count, dtype: int64\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.query('COUNTRY == \"United States\"')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390 2014-01-01  United States  ...  2014     1     159.2\n3         52392 2014-01-01  United States  ...  2014     1     159.0\n5         52394 2014-01-01  United States  ...  2014     1     159.0\n8         52397 2014-01-02  United States  ...  2014     1     139.0\n10        52399 2014-01-02  United States  ...  2014     1     129.0\n...         ...        ...            ...  ...   ...   ...       ...\n14956     65767 2016-12-31  United States  ...  2016    12     139.0\n14959     65770 2016-12-31  United States  ...  2016    12     119.2\n14960     65771 2016-12-31  United States  ...  2016    12     189.0\n14961     65772 2016-12-31  United States  ...  2016    12     129.0\n14963     65774 2016-12-31  United States  ...  2016    12     149.0\n\n[5886 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.query('COUNTRY == \"United States\" | COUNTRY == \"Canada\"')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390 2014-01-01  United States  ...  2014     1     159.2\n2         52391 2014-01-01         Canada  ...  2014     1     119.2\n3         52392 2014-01-01  United States  ...  2014     1     159.0\n5         52394 2014-01-01  United States  ...  2014     1     159.0\n7         52396 2014-01-02         Canada  ...  2014     1     169.0\n...         ...        ...            ...  ...   ...   ...       ...\n14959     65770 2016-12-31  United States  ...  2016    12     119.2\n14960     65771 2016-12-31  United States  ...  2016    12     189.0\n14961     65772 2016-12-31  United States  ...  2016    12     129.0\n14963     65774 2016-12-31  United States  ...  2016    12     149.0\n14964     65775 2016-12-31         Canada  ...  2016    12     125.3\n\n[8838 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.query(\"COUNTRY in ['United States', 'Canada']\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390 2014-01-01  United States  ...  2014     1     159.2\n2         52391 2014-01-01         Canada  ...  2014     1     119.2\n3         52392 2014-01-01  United States  ...  2014     1     159.0\n5         52394 2014-01-01  United States  ...  2014     1     159.0\n7         52396 2014-01-02         Canada  ...  2014     1     169.0\n...         ...        ...            ...  ...   ...   ...       ...\n14959     65770 2016-12-31  United States  ...  2016    12     119.2\n14960     65771 2016-12-31  United States  ...  2016    12     189.0\n14961     65772 2016-12-31  United States  ...  2016    12     129.0\n14963     65774 2016-12-31  United States  ...  2016    12     149.0\n14964     65775 2016-12-31         Canada  ...  2016    12     125.3\n\n[8838 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.query(\"COUNTRY == 'United States' & YEAR == 2016\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n7610      59206 2016-01-02  United States  ...  2016     1     132.3\n7613      59209 2016-01-02  United States  ...  2016     1     127.2\n7617      59213 2016-01-02  United States  ...  2016     1     125.3\n7618      59214 2016-01-02  United States  ...  2016     1     151.2\n7619      59214 2016-01-02  United States  ...  2016     1     151.2\n...         ...        ...            ...  ...   ...   ...       ...\n14956     65767 2016-12-31  United States  ...  2016    12     139.0\n14959     65770 2016-12-31  United States  ...  2016    12     119.2\n14960     65771 2016-12-31  United States  ...  2016    12     189.0\n14961     65772 2016-12-31  United States  ...  2016    12     129.0\n14963     65774 2016-12-31  United States  ...  2016    12     149.0\n\n[2935 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.query(\"COUNTRY == 'United States' & YEAR in [2015,2016]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n2753      54725 2015-01-01  United States  ...  2015     1     179.0\n2754      54726 2015-01-01  United States  ...  2015     1     169.0\n2755      54727 2015-01-01  United States  ...  2015     1     116.1\n2761      54733 2015-01-02  United States  ...  2015     1     179.0\n2766      54738 2015-01-02  United States  ...  2015     1     199.0\n...         ...        ...            ...  ...   ...   ...       ...\n14956     65767 2016-12-31  United States  ...  2016    12     139.0\n14959     65770 2016-12-31  United States  ...  2016    12     119.2\n14960     65771 2016-12-31  United States  ...  2016    12     189.0\n14961     65772 2016-12-31  United States  ...  2016    12     129.0\n14963     65774 2016-12-31  United States  ...  2016    12     149.0\n\n[4859 rows x 14 columns]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.loc[(product['COUNTRY'] == \"United States\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390 2014-01-01  United States  ...  2014     1     159.2\n3         52392 2014-01-01  United States  ...  2014     1     159.0\n5         52394 2014-01-01  United States  ...  2014     1     159.0\n8         52397 2014-01-02  United States  ...  2014     1     139.0\n10        52399 2014-01-02  United States  ...  2014     1     129.0\n...         ...        ...            ...  ...   ...   ...       ...\n14956     65767 2016-12-31  United States  ...  2016    12     139.0\n14959     65770 2016-12-31  United States  ...  2016    12     119.2\n14960     65771 2016-12-31  United States  ...  2016    12     189.0\n14961     65772 2016-12-31  United States  ...  2016    12     129.0\n14963     65774 2016-12-31  United States  ...  2016    12     149.0\n\n[5886 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.loc[product['COUNTRY'].isin([\"United States\", \"Canada\"])]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1         52390 2014-01-01  United States  ...  2014     1     159.2\n2         52391 2014-01-01         Canada  ...  2014     1     119.2\n3         52392 2014-01-01  United States  ...  2014     1     159.0\n5         52394 2014-01-01  United States  ...  2014     1     159.0\n7         52396 2014-01-02         Canada  ...  2014     1     169.0\n...         ...        ...            ...  ...   ...   ...       ...\n14959     65770 2016-12-31  United States  ...  2016    12     119.2\n14960     65771 2016-12-31  United States  ...  2016    12     189.0\n14961     65772 2016-12-31  United States  ...  2016    12     129.0\n14963     65774 2016-12-31  United States  ...  2016    12     149.0\n14964     65775 2016-12-31         Canada  ...  2016    12     125.3\n\n[8838 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.loc[product['COUNTRY'] \\\n  .isin([\"United States\", \"Canada\"]) & (product['YEAR'] == 2014)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1        52390 2014-01-01  United States  ...  2014     1     159.2\n2        52391 2014-01-01         Canada  ...  2014     1     119.2\n3        52392 2014-01-01  United States  ...  2014     1     159.0\n5        52394 2014-01-01  United States  ...  2014     1     159.0\n7        52396 2014-01-02         Canada  ...  2014     1     169.0\n...        ...        ...            ...  ...   ...   ...       ...\n2739     54713 2014-12-30  United States  ...  2014    12     189.0\n2745     54718 2014-12-31         Canada  ...  2014    12     151.2\n2746     54719 2014-12-31  United States  ...  2014    12     199.0\n2748     54721 2014-12-31         Canada  ...  2014    12      74.5\n2749     54722 2014-12-31  United States  ...  2014    12     118.3\n\n[1649 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.loc[(product['COUNTRY'] == \"United States\") & (product[\"YEAR\"] == 2014)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     INVOICENO       DATE        COUNTRY  ...  YEAR MONTH SALEPRICE\n1        52390 2014-01-01  United States  ...  2014     1     159.2\n3        52392 2014-01-01  United States  ...  2014     1     159.0\n5        52394 2014-01-01  United States  ...  2014     1     159.0\n8        52397 2014-01-02  United States  ...  2014     1     139.0\n10       52399 2014-01-02  United States  ...  2014     1     129.0\n...        ...        ...            ...  ...   ...   ...       ...\n2731     54705 2014-12-29  United States  ...  2014    12     179.0\n2734     54708 2014-12-30  United States  ...  2014    12     159.0\n2739     54713 2014-12-30  United States  ...  2014    12     189.0\n2746     54719 2014-12-31  United States  ...  2014    12     199.0\n2749     54722 2014-12-31  United States  ...  2014    12     118.3\n\n[1027 rows x 14 columns]\n```\n\n\n:::\n:::\n\n\n\n### `loc[]` Function can be used both for Slicing (selecting Rows) and Selecting Columns\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.loc[\n  product['COUNTRY'] == 'United States',\n  ['COUNTRY', \"UNITPRICE\", \"SALEPRICE\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             COUNTRY  UNITPRICE  SALEPRICE\n1      United States        199      159.2\n3      United States        159      159.0\n5      United States        159      159.0\n8      United States        139      139.0\n10     United States        129      129.0\n...              ...        ...        ...\n14956  United States        139      139.0\n14959  United States        149      119.2\n14960  United States        189      189.0\n14961  United States        129      129.0\n14963  United States        149      149.0\n\n[5886 rows x 3 columns]\n```\n\n\n:::\n:::\n\n\n\n\n## `arrange ()` Equivalent in Python - Sorting or Arranging Rows \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.sort_values(by = ['MONTH'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n0         52389 2014-01-01  United Kingdom  ...  2014     1     159.0\n2862      54831 2015-01-13         Germany  ...  2015     1     169.0\n2863      54832 2015-01-13         Germany  ...  2015     1     125.1\n2864      54833 2015-01-13   United States  ...  2015     1     135.2\n2865      54834 2015-01-13         Germany  ...  2015     1     149.0\n...         ...        ...             ...  ...   ...   ...       ...\n13225     64202 2016-09-28          Canada  ...  2016     9     189.0\n13224     64201 2016-09-28         Germany  ...  2016     9     149.0\n13223     64200 2016-09-28          Canada  ...  2016     9     199.0\n13235     64210 2016-09-29   United States  ...  2016     9     135.2\n12749     63775 2016-09-08         Germany  ...  2016     9     139.0\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.sort_values(by = ['MONTH'], ascending = False)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n13162     64145 2016-09-26  United Kingdom  ...  2016     9      90.3\n5946      57674 2015-09-12   United States  ...  2015     9     159.0\n5944      57672 2015-09-12          Canada  ...  2015     9     179.0\n5943      57671 2015-09-12         Germany  ...  2015     9     159.0\n5942      57670 2015-09-12          Canada  ...  2015     9     179.0\n...         ...        ...             ...  ...   ...   ...       ...\n3037      54995 2015-01-29   United States  ...  2015     1     103.2\n3038      54996 2015-01-30          Canada  ...  2015     1     161.1\n3039      54997 2015-01-30          Canada  ...  2015     1      84.5\n3040      54997 2015-01-30          Canada  ...  2015     1     169.0\n0         52389 2014-01-01  United Kingdom  ...  2014     1     159.0\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.sort_values(by = ['MONTH', 'SALEPRICE'])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      INVOICENO       DATE         COUNTRY  ...  YEAR MONTH SALEPRICE\n33        52414 2014-01-05         Germany  ...  2014     1      64.5\n177       52533 2014-01-25          Canada  ...  2014     1      64.5\n185       52539 2014-01-26  United Kingdom  ...  2014     1      64.5\n194       52548 2014-01-27  United Kingdom  ...  2014     1      64.5\n2762      54734 2015-01-02         Germany  ...  2015     1      64.5\n...         ...        ...             ...  ...   ...   ...       ...\n13245     64219 2016-09-29  United Kingdom  ...  2016     9     199.0\n13246     64220 2016-09-29   United States  ...  2016     9     199.0\n13248     64222 2016-09-29   United States  ...  2016     9     199.0\n13251     64224 2016-09-29         Germany  ...  2016     9     199.0\n13272     64244 2016-09-30   United States  ...  2016     9     199.0\n\n[14967 rows x 14 columns]\n```\n\n\n:::\n:::\n\n\n\n\n## `rename ()` Equivalent in Python - Renaming Column Names\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We already did some renaming of the columns using `str.` function. Here we use `rename ()` function to change the name of the columns. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  object        \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  object        \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  object        \n 13  SALEPRICE    14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(4), int64(2), object(7)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.rename( columns = \n  {'SIZE_(EUROPE)': 'SIZE_EUROPE',\n   'SIZE_(UK)' : 'SIZE_UK'}) \\\n   .pipe(lambda x: x.info())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 14 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  object        \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  object        \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  object        \n 13  SALEPRICE    14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(4), int64(2), object(7)\nmemory usage: 1.6+ MB\n```\n\n\n:::\n:::\n\n\n\n\n## `mutate ()` Equivalent in Python - Creating New Columns (Variables)\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct['NECOLUMN'] = 5\nproduct.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  INVOICENO       DATE         COUNTRY  ... MONTH SALEPRICE NECOLUMN\n0     52389 2014-01-01  United Kingdom  ...     1     159.0        5\n1     52390 2014-01-01   United States  ...     1     159.2        5\n2     52391 2014-01-01          Canada  ...     1     119.2        5\n3     52392 2014-01-01   United States  ...     1     159.0        5\n4     52393 2014-01-01  United Kingdom  ...     1     159.0        5\n\n[5 rows x 15 columns]\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.drop(columns = ['NECOLUMN'], axis = 1, inplace = True) \n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct['SALEPRICE2'] = product['UNITPRICE']*(1-product['DISCOUNT'])\nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 15 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  object        \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  object        \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  object        \n 13  SALEPRICE    14967 non-null  float64       \n 14  SALEPRICE2   14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(5), int64(2), object(7)\nmemory usage: 1.7+ MB\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n# Using the assign () function \nproduct[['PRODUCTID', 'UNITPRICE', 'DISCOUNT']] \\\n .assign(SALEPRICE3 = lambda x: x.UNITPRICE*(1-x.DISCOUNT)) \\\n .head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PRODUCTID  UNITPRICE  DISCOUNT  SALEPRICE3\n0      2152        159       0.0       159.0\n1      2230        199       0.2       159.2\n2      2160        149       0.2       119.2\n3      2234        159       0.0       159.0\n4      2222        159       0.0       159.0\n```\n\n\n:::\n:::\n\n\n\n\n## `group_by ()` and `summarize ()` Equivalent in Python - Summarizing Data \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Figure @fig-groupbyplot presents the split-apply-combine principle in `group_by ()` and `summarize ()` functions. \n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Split Apply and Combine Principle](images/split-apply-combine.png){#fig-groupbyplot fig-align='center' width=288}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 14967 entries, 0 to 14966\nData columns (total 15 columns):\n #   Column       Non-Null Count  Dtype         \n---  ------       --------------  -----         \n 0   INVOICENO    14967 non-null  object        \n 1   DATE         14967 non-null  datetime64[ns]\n 2   COUNTRY      14967 non-null  object        \n 3   PRODUCTID    14967 non-null  object        \n 4   SHOP         14967 non-null  object        \n 5   GENDER       14967 non-null  object        \n 6   SIZE_US      14967 non-null  float64       \n 7   SIZE_EUROPE  14967 non-null  object        \n 8   SIZE_UK      14967 non-null  float64       \n 9   UNITPRICE    14967 non-null  int64         \n 10  DISCOUNT     14967 non-null  float64       \n 11  YEAR         14967 non-null  int64         \n 12  MONTH        14967 non-null  object        \n 13  SALEPRICE    14967 non-null  float64       \n 14  SALEPRICE2   14967 non-null  float64       \ndtypes: datetime64[ns](1), float64(5), int64(2), object(7)\nmemory usage: 1.7+ MB\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.groupby(['COUNTRY']) ['UNITPRICE'].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCOUNTRY\nCanada            164.691057\nGermany           164.163934\nUnited Kingdom    165.614853\nUnited States     163.490316\nName: UNITPRICE, dtype: float64\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.groupby(['COUNTRY']) [['UNITPRICE', 'SALEPRICE']].mean()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 UNITPRICE   SALEPRICE\nCOUNTRY                               \nCanada          164.691057  144.228963\nGermany         164.163934  143.574658\nUnited Kingdom  165.614853  145.505872\nUnited States   163.490316  143.727421\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.groupby(['COUNTRY']) [['UNITPRICE', 'SALEPRICE']] \\\n       .agg(np.mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<string>:3: FutureWarning: The provided callable <function mean at 0x00000172A9393740> is currently using DataFrameGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n                 UNITPRICE   SALEPRICE\nCOUNTRY                               \nCanada          164.691057  144.228963\nGermany         164.163934  143.574658\nUnited Kingdom  165.614853  145.505872\nUnited States   163.490316  143.727421\n```\n\n\n:::\n\n```{.python .cell-code}\nproduct.groupby(['COUNTRY']) [['UNITPRICE', 'SALEPRICE']] \\\n       .agg(\"mean\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                 UNITPRICE   SALEPRICE\nCOUNTRY                               \nCanada          164.691057  144.228963\nGermany         164.163934  143.574658\nUnited Kingdom  165.614853  145.505872\nUnited States   163.490316  143.727421\n```\n\n\n:::\n\n```{.python .cell-code}\n       \nproduct.groupby(['COUNTRY']) [['UNITPRICE', 'SALEPRICE']] \\\n       .agg(AVG_UNITPRICE = (\"UNITPRICE\", \"mean\"), \n            AVG_LISTPRICE = (\"SALEPRICE\", \"mean\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                AVG_UNITPRICE  AVG_LISTPRICE\nCOUNTRY                                     \nCanada             164.691057     144.228963\nGermany            164.163934     143.574658\nUnited Kingdom     165.614853     145.505872\nUnited States      163.490316     143.727421\n```\n\n\n:::\n\n```{.python .cell-code}\n            \n            \nproduct.groupby(['COUNTRY']) [['UNITPRICE', 'SALEPRICE']] \\\n       .agg(AVG_UNITPRICE = (\"UNITPRICE\", \"mean\"), \n            AVG_LISTPRICE = (\"SALEPRICE\", \"mean\"),\n            TOTALN = (\"SALEPRICE\", \"size\"), # size function for n\n            TOTALOBS = (\"SALEPRICE\", \"count\") # count function for n\n            )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                AVG_UNITPRICE  AVG_LISTPRICE  TOTALN  TOTALOBS\nCOUNTRY                                                       \nCanada             164.691057     144.228963    2952      2952\nGermany            164.163934     143.574658    4392      4392\nUnited Kingdom     165.614853     145.505872    1737      1737\nUnited States      163.490316     143.727421    5886      5886\n```\n\n\n:::\n\n```{.python .cell-code}\n# Combining Several Pandas Functions together           \nproduct.groupby(['COUNTRY']) [['UNITPRICE', 'SALEPRICE']] \\\n       .agg(AVG_UNITPRICE = (\"UNITPRICE\", \"mean\"), \n            AVG_LISTPRICE = (\"SALEPRICE\", \"mean\"),\n            TOTALN = (\"SALEPRICE\", \"size\"), # size function for n\n            TOTALOBS = (\"SALEPRICE\", \"count\") # count function for n\n            ) \\\n       .sort_values(by = ['TOTALOBS'], ascending = False) \\\n       .reset_index() \\\n       .query ('COUNTRY == \"United States\"')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         COUNTRY  AVG_UNITPRICE  AVG_LISTPRICE  TOTALN  TOTALOBS\n0  United States     163.490316     143.727421    5886      5886\n```\n\n\n:::\n:::\n\n\n\n\n\n## Summary Statistics in Python \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Summary Statistics in Python \nproduct.GENDER.value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGENDER\nMale      8919\nFemale    6048\nName: count, dtype: int64\n```\n\n\n:::\n\n```{.python .cell-code}\n# Encoding a Categorical Variables \nproduct['SEX'] = product['GENDER'].map({\n  'Male':1,\n  'Female':0\n})\n\n\n# Defining a Function \ndef percentile(n):\n    def percentile_(x):\n        return x.quantile(n)\n    percentile_.__name__ = 'percentile_{:02.0f}'.format(n*100)\n    return percentile_\n  \nproduct [['SALEPRICE', 'UNITPRICE', 'SEX']] \\\n     .agg([\"count\",\"mean\", \"std\", \"median\", percentile(0.25), percentile(0.75)]) \\\n     .transpose () \\\n     .reset_index() \\\n     .rename(columns = {'index': \"Variables\",\n                        'percentile_25': 'P25',\n                        'percentile_75': 'P75',\n                        'count': 'n',\n                        'mean' : 'Mean',\n                        'median' : 'Median',\n                        'std': 'Std'\n                       }) \\\n      .round(3) # rounding to two decimal places \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Variables        n     Mean     Std  Median    P25    P75\n0  SALEPRICE  14967.0  143.988  35.181   149.0  125.1  169.0\n1  UNITPRICE  14967.0  164.171  22.941   159.0  149.0  179.0\n2        SEX  14967.0    0.596   0.491     1.0    0.0    1.0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n# Reshaping Data \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Two functions are widely used in python to reshape data. These functions are - `melt ()` and `pivot ()`, which are equivalent to `pivot_longer ()` and `pivot_wider ()` in R. \n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\npd.__version__ # 2.2.3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'2.2.3'\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nproduct[['PRODUCTID','GENDER']].value_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nPRODUCTID  GENDER\n2192       Male      135\n2190       Male      132\n2206       Male      123\n2183       Male      123\n2226       Male      123\n                    ... \n2176       Female     39\n2166       Female     39\n2235       Female     36\n2164       Female     33\n2162       Female     33\nName: count, Length: 192, dtype: int64\n```\n\n\n:::\n\n```{.python .cell-code}\nreshape = product[['PRODUCTID','GENDER']] \\\n          .value_counts() \\\n          .reset_index(name = 'COUNTS') \\\n          .pivot(index = 'PRODUCTID', columns = 'GENDER', values = \"COUNTS\") \\\n          .assign (TOTALSALES = lambda x: x.Female + x.Male) \\\n          .sort_values (by = ['TOTALSALES'], ascending = False) \\\n          .reset_index() \n          \nreshape.head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGENDER PRODUCTID  Female  Male  TOTALSALES\n0           2190      75   132         207\n1           2213      90   114         204\n2           2226      81   123         204\n3           2192      66   135         201\n4           2158      78   120         198\n```\n\n\n:::\n:::\n\n\n\n\n\n# Data Visualization \n\n## Bar Chart \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nbar_r = product.filter (['COUNTRY']) \\\n       .value_counts() \\\n       .reset_index() \\\n       .rename (columns = {'count':'n'}) \\\n       .sort_values (by = ['n'])\n\n(ggplot(data = bar_r, \n  mapping = aes(x = 'COUNTRY', y = 'n'))+\n  geom_bar (fill = \"pink\", stat = \"identity\")+\n  labs (x = 'Country',\n  y = 'Number of Observations'\n  #,title = 'Total Observations of Countries'\n  )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<plotnine.ggplot.ggplot object at 0x00000172BC012990>\n```\n\n\n:::\n:::\n\n\n\n\n## Line Chart \n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\n(ggplot(product, aes(x = 'SIZE_US', y= 'UNITPRICE', color = 'GENDER'))+\n facet_wrap('COUNTRY')+\n geom_smooth(se = False, method = 'lm')+\n labs(x = \"Shoe Size (US)\", y = \"Price\")+\n theme (legend_position = \"top\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<plotnine.ggplot.ggplot object at 0x00000172BBD43680>\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.python .cell-code}\nmonth_sales = product['MONTH'] \\\n    .value_counts(sort = False) \\\n    .reset_index(name = 'SALES') \\\n    .rename (columns = {'index' : 'MONTH'})\n\nmonth_sales['MONTH'] = pd.to_numeric(month_sales['MONTH']) \n\n(ggplot(month_sales, aes (\"MONTH\", \"SALES\"))\n + geom_point(color = 'blue')\n + labs(x = \"Month\", y = \"Total Sales\"\n   #,title = \"SALES IN DIFFERENT MONTHS\"\n   )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<plotnine.ggplot.ggplot object at 0x00000172BB3A7A70>\n```\n\n\n:::\n:::\n\n\n\n\n# Conclusion \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data science is the number 1 most promising job in the US in recent years[^1]. Many disciplines around the world are incorporating the knowledge of data science in their day to operations. The skills employers most frequently seek in data science job posting are `Python`, `R`, and `SQL`. It is hoped that the preliminary discussion in this project will help you to get some idea about `Python` in data science. \n\n\n\n[^1]:https://www.techrepublic.com/article/why-data-scientist-is-the-most-promising-job-of-2019/\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}