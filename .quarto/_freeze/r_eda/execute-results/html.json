{
  "hash": "26b9cd88934e384500df0a6d126b7965",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"<center> Exploratory Data Analysis in R\"\nformat: \n  html: \n    toc: true\n    #toc-title: Table of Contents \n    toc-depth: 5\n    number-sections: true\n    mainfont: emoji\nengine: knitr\n---\n\n\n\n\n\n\n# Introduction \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The objective of this document is to introduce the necessary functions from `tidyverse` package for data manipulation and data visualization. There are basically six functions - `select()`, `filter()`, `mutate()`, `arrange()`, `group_by()`, and `summarize()` - from `dplyr` package of `tidyverse` ecosystem that are very much necessary for data manipulation. These six functions can be used for 80% of data manipulation problems. Additionally, this handout also introduces `ggplot` functions from `tidyverse`. `ggplot` is considered very effective for data visualization. \n\n\n\n\n\n\n\n\n\n\n# Loading Necessary Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(lubridate)\n```\n:::\n\n\n\n\n\n# Data Set for Classroom Practice \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Loading Data \n\nproduct <- read_csv(\n  \"https://raw.githubusercontent.com/msharifbd/DATA/main/Al-Bundy_raw-data.csv\"\n)\n```\n:::\n\n\n\n\n# Clean the Data Set\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To clean the names of the variables\nproduct <- product %>%\n  janitor::clean_names() %>% # this function cleans the names of the variables\n  dplyr::rename_all(toupper) # All variable names in upper case\n```\n:::\n\n\n\n\n# Meta Data \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Once you load a data set in R, your next job should be to learn about some characteristics about the data. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(product)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 14\n$ INVOICE_NO  <dbl> 52389, 52390, 52391, 52392, 52393, 52394, 52395, 52396, 52…\n$ DATE        <chr> \"1/1/2014\", \"1/1/2014\", \"1/1/2014\", \"1/1/2014\", \"1/1/2014\"…\n$ COUNTRY     <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United State…\n$ PRODUCT_ID  <dbl> 2152, 2230, 2160, 2234, 2222, 2173, 2200, 2238, 2191, 2237…\n$ SHOP        <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"CAN5…\n$ GENDER      <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Femal…\n$ SIZE_US     <dbl> 11.0, 11.5, 9.5, 9.5, 9.0, 10.5, 9.0, 10.0, 10.5, 9.0, 10.…\n$ SIZE_EUROPE <chr> \"44\", \"44-45\", \"42-43\", \"40\", \"39-40\", \"43-44\", \"39-40\", \"…\n$ SIZE_UK     <dbl> 10.5, 11.0, 9.0, 7.5, 7.0, 10.0, 7.0, 9.5, 10.0, 7.0, 9.5,…\n$ UNIT_PRICE  <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129, 169…\n$ DISCOUNT    <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ SALE_PRICE  <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0, 13…\n```\n\n\n:::\n:::\n\n\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It can be seen that there are 14,967 Rows (also called observations) and 14 columns (also called variables). The name of the first variable is `INVOICE_ID`, which type is `chr`, which means it is character type. \n\n# Changing the Types of Variables \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sometimes we might need to change the type of the variable; e.g., converting an integer variable to a character variable. In such case, we need to write code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Changing the types of Variables \nproduct <- product %>% \n  mutate(\n    DATE = mdy(DATE),\n    PRODUCT_ID = as.character(PRODUCT_ID),\n    SIZE_US = as.character(SIZE_US),\n    MONTH = as.character(MONTH),\n    INVOICE_NO = as.character(INVOICE_NO)\n  )\nglimpse(product)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 14\n$ INVOICE_NO  <chr> \"52389\", \"52390\", \"52391\", \"52392\", \"52393\", \"52394\", \"523…\n$ DATE        <date> 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-0…\n$ COUNTRY     <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United State…\n$ PRODUCT_ID  <chr> \"2152\", \"2230\", \"2160\", \"2234\", \"2222\", \"2173\", \"2200\", \"2…\n$ SHOP        <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"CAN5…\n$ GENDER      <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Femal…\n$ SIZE_US     <chr> \"11\", \"11.5\", \"9.5\", \"9.5\", \"9\", \"10.5\", \"9\", \"10\", \"10.5\"…\n$ SIZE_EUROPE <chr> \"44\", \"44-45\", \"42-43\", \"40\", \"39-40\", \"43-44\", \"39-40\", \"…\n$ SIZE_UK     <dbl> 10.5, 11.0, 9.0, 7.5, 7.0, 10.0, 7.0, 9.5, 10.0, 7.0, 9.5,…\n$ UNIT_PRICE  <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129, 169…\n$ DISCOUNT    <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"…\n$ SALE_PRICE  <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0, 13…\n```\n\n\n:::\n:::\n\n\n\n\n# Create a New Data Set with Some Variables \n\n\n## 1st (First) verb - `select ()`\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The `select ()` function is used to select some **columns** from your data set. For example, if you want to select all variables except `SIZE_EUROPE` and `SIZE_UK` from your data set. Then you should write the following code (We created a new data set called product2)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct2 <- product %>% \n  select(\n   -SIZE_EUROPE, - SIZE_UK  \n  )  # 1st Verb\nglimpse(product2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 14,967\nColumns: 12\n$ INVOICE_NO <chr> \"52389\", \"52390\", \"52391\", \"52392\", \"52393\", \"52394\", \"5239…\n$ DATE       <date> 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-01…\n$ COUNTRY    <chr> \"United Kingdom\", \"United States\", \"Canada\", \"United States…\n$ PRODUCT_ID <chr> \"2152\", \"2230\", \"2160\", \"2234\", \"2222\", \"2173\", \"2200\", \"22…\n$ SHOP       <chr> \"UK2\", \"US15\", \"CAN7\", \"US6\", \"UK4\", \"US15\", \"GER2\", \"CAN5\"…\n$ GENDER     <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"Male\", \"Female…\n$ SIZE_US    <chr> \"11\", \"11.5\", \"9.5\", \"9.5\", \"9\", \"10.5\", \"9\", \"10\", \"10.5\",…\n$ UNIT_PRICE <dbl> 159, 199, 149, 159, 159, 159, 179, 169, 139, 149, 129, 169,…\n$ DISCOUNT   <dbl> 0.0, 0.2, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,…\n$ YEAR       <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014,…\n$ MONTH      <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\",…\n$ SALE_PRICE <dbl> 159.0, 159.2, 119.2, 159.0, 159.0, 159.0, 179.0, 169.0, 139…\n```\n\n\n:::\n:::\n\n\n\n\n# `count ()` Function to deal with categorical variables\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To know the frequency of different **categorical** variables, we can use the ``count()` function. For example - we want to know whether the dataset includes information about United States; we should write - \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of Countries \nproduct %>% \n  count(COUNTRY) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  COUNTRY            n\n  <chr>          <int>\n1 Canada          2952\n2 Germany         4392\n3 United Kingdom  1737\n4 United States   5886\n```\n\n\n:::\n\n```{.r .cell-code}\n# Number of Years \nproduct %>% \n  count(YEAR)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n   YEAR     n\n  <dbl> <int>\n1  2014  2753\n2  2015  4848\n3  2016  7366\n```\n\n\n:::\n\n```{.r .cell-code}\n# Number of Invoices \nproduct %>% \n  count(INVOICE_NO)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13,389 × 2\n   INVOICE_NO     n\n   <chr>      <int>\n 1 52389          1\n 2 52390          1\n 3 52391          1\n 4 52392          1\n 5 52393          1\n 6 52394          1\n 7 52395          1\n 8 52396          1\n 9 52397          1\n10 52398          1\n# ℹ 13,379 more rows\n```\n\n\n:::\n:::\n\n\n\n\n**QUESTIONS** - 1. How many products are available in the dataset?\n            2. How many shoe sizes are available in the dataset (use `SIZE_US` variable)\n            \n# Create a new data set that satisfies some rows conditions \n\n## 2nd (Second) verb - `filter ()`\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If we want to subset our dataset by rows, then `filter ()` is used. For example - we want to create a data set that will include only observations for United States, then we should write the following code. The name of the dataset is given `US`.  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUS <- product %>% \n  filter(\n    COUNTRY == \"United States\"\n  )   # 2nd Verb\n\nglimpse(US)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,886\nColumns: 14\n$ INVOICE_NO  <chr> \"52390\", \"52392\", \"52394\", \"52397\", \"52399\", \"52399\", \"523…\n$ DATE        <date> 2014-01-01, 2014-01-01, 2014-01-01, 2014-01-02, 2014-01-0…\n$ COUNTRY     <chr> \"United States\", \"United States\", \"United States\", \"United…\n$ PRODUCT_ID  <chr> \"2230\", \"2234\", \"2173\", \"2191\", \"2197\", \"2213\", \"2206\", \"2…\n$ SHOP        <chr> \"US15\", \"US6\", \"US15\", \"US13\", \"US1\", \"US11\", \"US2\", \"US15…\n$ GENDER      <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Femal…\n$ SIZE_US     <chr> \"11.5\", \"9.5\", \"10.5\", \"10.5\", \"10\", \"9.5\", \"9.5\", \"8\", \"1…\n$ SIZE_EUROPE <chr> \"44-45\", \"40\", \"43-44\", \"43-44\", \"43\", \"40\", \"40\", \"41\", \"…\n$ SIZE_UK     <dbl> 11.0, 7.5, 10.0, 10.0, 9.5, 7.5, 7.5, 7.5, 10.5, 7.5, 9.5,…\n$ UNIT_PRICE  <dbl> 199, 159, 159, 139, 129, 169, 139, 139, 149, 159, 129, 169…\n$ DISCOUNT    <dbl> 0.2, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.5, 0.0, 0.0, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"…\n$ SALE_PRICE  <dbl> 159.2, 159.0, 159.0, 139.0, 129.0, 152.1, 139.0, 139.0, 74…\n```\n\n\n:::\n\n```{.r .cell-code}\nGermany <- product %>% \n  filter(\n    COUNTRY == \"Germany\" & YEAR %in% c ('2014', '2015')\n  ) \nglimpse(Germany)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,229\nColumns: 14\n$ INVOICE_NO  <chr> \"52395\", \"52401\", \"52401\", \"52408\", \"52409\", \"52414\", \"524…\n$ DATE        <date> 2014-01-02, 2014-01-03, 2014-01-03, 2014-01-04, 2014-01-0…\n$ COUNTRY     <chr> \"Germany\", \"Germany\", \"Germany\", \"Germany\", \"Germany\", \"Ge…\n$ PRODUCT_ID  <chr> \"2200\", \"2235\", \"2197\", \"2206\", \"2157\", \"2235\", \"2239\", \"2…\n$ SHOP        <chr> \"GER2\", \"GER1\", \"GER1\", \"GER2\", \"GER2\", \"GER1\", \"GER2\", \"G…\n$ GENDER      <chr> \"Female\", \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Femal…\n$ SIZE_US     <chr> \"9\", \"10.5\", \"8.5\", \"8.5\", \"12\", \"9.5\", \"8.5\", \"10.5\", \"10…\n$ SIZE_EUROPE <chr> \"39-40\", \"43-44\", \"39\", \"41-42\", \"45\", \"42-43\", \"39\", \"43-…\n$ SIZE_UK     <dbl> 7.0, 10.0, 6.5, 8.0, 11.5, 9.0, 6.5, 10.0, 9.5, 8.0, 10.0,…\n$ UNIT_PRICE  <dbl> 179, 169, 179, 149, 149, 169, 129, 169, 199, 149, 169, 189…\n$ DISCOUNT    <dbl> 0.0, 0.5, 0.2, 0.2, 0.2, 0.3, 0.5, 0.5, 0.0, 0.2, 0.5, 0.1…\n$ YEAR        <dbl> 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014, 2014…\n$ MONTH       <chr> \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"…\n$ SALE_PRICE  <dbl> 179.0, 84.5, 143.2, 119.2, 119.2, 118.3, 64.5, 84.5, 199.0…\n```\n\n\n:::\n\n```{.r .cell-code}\ncount (Germany, YEAR)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n   YEAR     n\n  <dbl> <int>\n1  2014   710\n2  2015  1519\n```\n\n\n:::\n:::\n\n\n\n\n**QUESTIONS** - 1. Filter those observations that belong to United States and Germany and that are related to Male Gender. \n\n# Average Price of Shoes \n\n## 3rd (Third) verb - `summarize ()` \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The `summarize ()` function is used to calculate different statistics such as mean, median, standard deviation, maximum, and minimum value. For example, we want to calculate the average price of all products - \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>% \n  summarize(AVG_PRICE = mean(SALE_PRICE)) # 3rd Verb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  AVG_PRICE\n      <dbl>\n1      144.\n```\n\n\n:::\n:::\n\n\n\n\n\n## 4th (Fourth) verb - `group_by ()` \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The `group_by ()` function is very useful when it is used with `summarize ()` function. For example, we want to know the average price for each country; then, we should write the following code - \n\n## 5th (Fifth) verb - `arrange ()`\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The `arrange ()`function allows you to reorder your data set by one or more variables.\nFor example, if you want to reorder the average price in difference countries, you need to execute the following code - \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>% \n  group_by(COUNTRY) %>% # 4th Verb \n  summarise(AVG_PRICE = mean(SALE_PRICE)) %>% \n  arrange(AVG_PRICE) # 5th Verb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  COUNTRY        AVG_PRICE\n  <chr>              <dbl>\n1 Germany             144.\n2 United States       144.\n3 Canada              144.\n4 United Kingdom      146.\n```\n\n\n:::\n:::\n\n\n\n**QUESTIONS** - 1. Calculate the average price for both Gender. Who pays greater price?\n2. Calculate the average discount for both Gender. Who gets higher discount?\n3. Calculate the average discount for each month. In which month highest discount is provided?\n\n# Reshaping the Data \n\n## `Tidy` Data \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There are three interrelated rules which make a dataset tidy:\n\n* Each variable must have its own column.\n* Each observation must have its own row.\n* Each value must have its own cell.\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/tidy-1.png){width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# An example of a Tidy Dataset \ntable1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Manipulating tidy data is easy. For example, for dataset `table1`, if we want to measure the rate of, we can do it easily. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable1 %>% \n  mutate(rate = cases / population * 10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  country      year  cases population  rate\n  <chr>       <dbl>  <dbl>      <dbl> <dbl>\n1 Afghanistan  1999    745   19987071 0.373\n2 Afghanistan  2000   2666   20595360 1.29 \n3 Brazil       1999  37737  172006362 2.19 \n4 Brazil       2000  80488  174504898 4.61 \n5 China        1999 212258 1272915272 1.67 \n6 China        2000 213766 1280428583 1.67 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n## `Untidy` Data\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Untidy data violate the principle of the tidy data. Therefore, we need to apply analytics to transform it into tidy data. There are two important functions from `tidyr` that can be used to reshape data. The first one is - `pivot_wider` function and the second one is `pivot_longer` function. `pivot_wider` widens a *LONG* data whereas `pivot_longer` lengthens a *WIDE* data.  \n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/pivot.png){width=100%}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Some Built-in Untidy Datasets\n\ntable2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   country      year type            count\n   <chr>       <dbl> <chr>           <dbl>\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n```\n\n\n:::\n\n```{.r .cell-code}\ntable3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country      year rate             \n  <chr>       <dbl> <chr>            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n```\n\n\n:::\n\n```{.r .cell-code}\ntable4a\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  <chr>        <dbl>  <dbl>\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n```\n\n\n:::\n\n```{.r .cell-code}\ntable4b\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  country         `1999`     `2000`\n  <chr>            <dbl>      <dbl>\n1 Afghanistan   19987071   20595360\n2 Brazil       172006362  174504898\n3 China       1272915272 1280428583\n```\n\n\n:::\n:::\n\n\n\n\n### `pivot_longer()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4a %>% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     year   cases\n  <chr>       <chr>  <dbl>\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntable4b %>% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"population\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  country     year  population\n  <chr>       <chr>      <dbl>\n1 Afghanistan 1999    19987071\n2 Afghanistan 2000    20595360\n3 Brazil      1999   172006362\n4 Brazil      2000   174504898\n5 China       1999  1272915272\n6 China       2000  1280428583\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy4a <- table4a %>% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"cases\")\ntidy4b <- table4b %>% \n  pivot_longer(c(`1999`, `2000`), names_to = \"year\", values_to = \"population\")\nleft_join(tidy4a, tidy4b,\n          by = c ('country', 'year'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country     year   cases population\n  <chr>       <chr>  <dbl>      <dbl>\n1 Afghanistan 1999     745   19987071\n2 Afghanistan 2000    2666   20595360\n3 Brazil      1999   37737  172006362\n4 Brazil      2000   80488  174504898\n5 China       1999  212258 1272915272\n6 China       2000  213766 1280428583\n```\n\n\n:::\n:::\n\n\n\n\n### `pivot_wider()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable2 %>%\n    pivot_wider(names_from = type, values_from = count)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  country      year  cases population\n  <chr>       <dbl>  <dbl>      <dbl>\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583\n```\n\n\n:::\n:::\n\n\n\n\n## Identify Total Sales by Gender of Each Product (PRODUCT_ID) \n\n### 6th (Sixth) verb - `mutate ()`\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The function `mutate ()` is used to create new variables (columns). For example, we want to know the `TOTAL_SALE`, which is the sum of the sum of sale by gender; then, we should write the following code - \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>%\n  count(PRODUCT_ID, GENDER) %>%\n  arrange(-n) %>% \n  pivot_wider(\n    names_from = GENDER,\n    values_from = n\n  ) %>% \n  rename_all(toupper) %>% \n  rename_at(vars(c(\"MALE\",\"FEMALE\")), ~paste0(.x,\"_SALE\")) %>% \n  mutate(\n    TOTAL_SALE = MALE_SALE + FEMALE_SALE\n  ) %>% # 6th Verb\n  arrange(-TOTAL_SALE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 96 × 4\n   PRODUCT_ID MALE_SALE FEMALE_SALE TOTAL_SALE\n   <chr>          <int>       <int>      <int>\n 1 2190             132          75        207\n 2 2226             123          81        204\n 3 2213             114          90        204\n 4 2192             135          66        201\n 5 2158             120          78        198\n 6 2172             114          75        189\n 7 2179             102          87        189\n 8 2239              87         102        189\n 9 2225             117          69        186\n10 2183             123          60        183\n# ℹ 86 more rows\n```\n\n\n:::\n:::\n\n\n\n\n**QUESTIONS** - 1. Identify Total Sales by Gender of Each Shoe Size (SIZE_US) \n\n# Bar Chart \n\n##  Create a Bar Chart of Sale of Shoes by Gender of Different Sizes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>%\n  count(SIZE_US, GENDER) %>%\n  pivot_wider(\n    names_from = \"GENDER\",\n    values_from = \"n\"\n  ) %>%\n  rename_all(toupper) %>%\n  replace(is.na(.),0) %>%\n  mutate(\n    TOTAL_SALES = FEMALE + MALE\n  ) %>%\n  pivot_longer(\n    cols = c(\"FEMALE\", \"MALE\"),\n    names_to = \"GENDER\",\n    values_to = \"GENDERSALES\"\n  )%>%\n  ggplot(aes(x=reorder(SIZE_US,as.numeric(SIZE_US)), y= GENDERSALES, fill = GENDER))+\n  geom_bar(stat = \"identity\")+\n  labs(x = \"SHOE SIZE\",\n       y = \"TOTAL SALES\",\n       title = \"SALES OF DIFFERENT SIZES OF SHOE\")+\n  geom_text(aes(label = GENDERSALES),\n            position = position_stack(vjust = 0.5),\n            color = \"black\",\n            size = 2\n  )+\n  theme(legend.title = element_blank())\n```\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n## Create a Bar Chart of Sale of Shoes by Gender of Different Sizes in different countries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>%\n  count(SIZE_US, GENDER, COUNTRY) %>%\n  ggplot(aes(x=reorder(SIZE_US,as.numeric(SIZE_US)), y= n, fill = GENDER))+\n  geom_bar(stat = \"identity\")+\n  labs(x = \"SHOE SIZE\",\n       y = \"TOTAL SALES\",\n       title = \"SALES OF DIFFERENT SIZES OF SHOE BY GENDER IN DIFFERENT COUNTRIES\"\n  )+\n  geom_text(\n    aes(label = n),\n    position = position_stack(vjust = 0.5),\n    color = \"black\",\n    size = 2\n  )+\n  facet_wrap(~ COUNTRY, nrow = 2, ncol = 2\n  )+\n  theme(legend.position=\"top\",\n        legend.title = element_blank())+\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n## Create a Bar Chart for Product ID (PRODUCT_ID) 2190 Sales by shoes sizes\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>% \n  filter(\n    PRODUCT_ID == \"2190\"\n  ) %>% \n  count(SIZE_US) %>% \n  mutate(SIZE_US = (str_c (\"SIZE_\", SIZE_US))) %>% \n  ggplot(aes(x = reorder(SIZE_US,n), y = n))+\n  geom_bar(stat=\"identity\", color = \"blue\", fill = \"orange\")+\n  coord_flip()+\n  geom_text(aes(label = n), stat = \"identity\", hjust = -0.2)+ # Here also try to use vjust and take out coord_flip()\n  xlab(\"SHOE SIZE\")+\n  ylab(\"SALES (UNIT)\")+\n  ggtitle(\"DISTRIBUTION of SALES for PRODUCT ID 2190\")\n```\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n**QUESTIONS** - 1. Create a Bar Chart for Product ID (PRODUCT_ID) 2190 Sales by Gender of Different Shoes Sizes \n\n# Relationship between Shoe Size and Price \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>%\n  ggplot(\n    aes(x = as.numeric(SIZE_US), y = UNIT_PRICE)\n  )+\n  geom_smooth(se = FALSE)+\n  xlab(\"SHOE SIZE (US)\")+\n  ylab(\"PRICE\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n```{.r .cell-code}\nproduct %>%\n  ggplot(\n    aes(x = as.numeric(SIZE_US), y = UNIT_PRICE, color = COUNTRY)\n  )+\n  geom_smooth(se = FALSE)+\n  xlab(\"SHOE SIZE (US)\")+\n  ylab(\"PRICE\")+\n  theme(legend.title = element_blank())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-24-2.png){width=672}\n:::\n\n```{.r .cell-code}\nproduct %>%\n  ggplot(\n    aes(x = as.numeric(SIZE_US), y = UNIT_PRICE)\n  )+\n  geom_smooth(se = FALSE, color = \"red\")+\n  xlab(\"SHOE SIZE (US)\")+\n  ylab(\"PRICE\")+\n  facet_wrap(~COUNTRY)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-24-3.png){width=672}\n:::\n\n```{.r .cell-code}\nproduct %>%\n  ggplot(\n    aes(x = as.numeric(SIZE_US), y = UNIT_PRICE)\n  )+\n  geom_smooth(se = FALSE)+\n  xlab(\"SHOE SIZE (US)\")+\n  ylab(\"PRICE\")+\n  facet_wrap(~GENDER)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-24-4.png){width=672}\n:::\n\n```{.r .cell-code}\nproduct %>%\n  ggplot(\n    aes(x = as.numeric(SIZE_US), y = UNIT_PRICE, color = GENDER)\n  )+\n  geom_smooth(se = FALSE)+\n  xlab(\"SHOE SIZE (US)\")+\n  ylab(\"PRICE\")+\n  theme(legend.title = element_blank())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-24-5.png){width=672}\n:::\n:::\n\n\n\n\n## Relationship between Shoe Size and Price in Different Gender and in Different Countries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>%\n  ggplot(\n    aes(x = as.numeric(SIZE_US), y = UNIT_PRICE, color = GENDER)\n  )+\n  geom_smooth(se = FALSE)+\n  xlab(\"SHOE SIZE (US)\")+\n  ylab(\"PRICE\")+\n  facet_wrap(~COUNTRY)+\n  theme(legend.title = element_blank())\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n**QUESTIONS** - 1. Do the Above Analyses for the Relationship between Shoe Size and Discount\n\n# Relationship between Sales and Month\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct %>%\n  count(MONTH) %>%\n  ggplot(aes(x = reorder(MONTH,as.numeric(MONTH) ), y = n))+\n  geom_point(color = \"red\")+\n  labs(x = \"MONTH\",\n       y = \"TOTAL SALES\", title = \"SALES IN DIFFERENT MONTHS\")\n```\n\n::: {.cell-output-display}\n![](r_eda_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n**QUESTIONS** - 1. Visualize the Relationship between Sales and Month in different countries\n\n# Conclusion\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Data science is the number 1 most promising job in the US in recent years[^1]. Many disciplines around the world are incorporating the knowledge of data science in their day to day operations. The skills employers most frequently seek in data science job posting are `Python`, `R`, and `SQL`. It is hoped that the preliminary discussion in this project will help you to get some idea about `R` in data science. \n\n[^1]: https://www.techrepublic.com/article/why-data-scientist-is-the-most-promising-job-of-2019/",
    "supporting": [
      "r_eda_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}