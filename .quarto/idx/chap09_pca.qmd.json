{"title":"<center> Chapter # 09 <br> Dimension Reduction & PCA","markdown":{"yaml":{"title":"<center> Chapter # 09 <br> Dimension Reduction & PCA","format":"html"},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\n\nThis document is prepared using `Quarto` in `RStudio`. The `Quarto` file (`.qmd`) can be converted to notebook (`.ipynb`) by running the code - `quarto convert filename.qmd` - in the terminal of `RStudio`. Similarly a Python `notebook` file (`.ipynb`) can be converted into `Quarto` (`.qmd`) by running the code - `quarto convert filename.ipynb` in the terminal of `RStudio`. More about the conversion can be found [here](!https://quarto.org/docs/tools/jupyter-lab.html).\n\n\nUseful Youtube video link for [PCA](https://www.youtube.com/watch?v=S51bTyIwxFs)\n\n# What is Principal Component Analysis (PCA)?\n\n\n\n# Working Directory\n\n```{python}\n#| eval: false\nimport os\nos.getcwd()\nfor files in os.listdir():\n  print(files)\n\n# Ignore Warnings \nimport warnings \nwarnings.filterwarnings('ignore')\n```\n\n# Loading Necessary `Python` Packages\n\n```{python}\n# For Data Manipulation & Analysis\nimport pandas as pd\nimport numpy as np\n# For visualization \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n# For Machine Learning \nimport sklearn \n```\n\n# Loading Dataset\n\n```{python}\nfrom sklearn import datasets\ncancer = datasets.load_breast_cancer()\ndir(cancer)\ncancer.keys()\n```\n\n```{python}\ndf = pd.DataFrame(cancer.data, columns = cancer.feature_names)\ndf.head()\n```\n\n\n```{python}\ndf.shape\nprint (\"The number of rows and columns in the dataset is {} and {} respectively\".format(df.shape[0], df.shape[1]))\n```\n## Metadata of the Dataset \n\n```{python}\ndf.info()\n```\n\n```{python}\ndf.isnull().sum()\n```\n\n\n# Correlation of the variables \n\n```{python}\ncorrelation = df.corr()\nplt.figure(figsize=(20,17))\nsns.heatmap(correlation, vmax=1, square=True,annot=True,cmap='cubehelix')\nplt.title('Correlation between different features')\nplt.show()\n```\n\n# Preprocessing of the Dataset\n\n```{python}\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(df)\nscaled_df = pd.DataFrame(scaled_data, columns = cancer.feature_names)\nscaled_df.sample(5)\n```\n\n```{python}\nprint('The mean and standard deviation of  \\\nthe variable \"mean radius\" are {} and {} \\\nrespectively.'.format(round(scaled_df['mean radius'].mean(),4), round(scaled_df['mean radius'].std(),4)))\n```\n\n\n# Covariance Matrix\n\n\n```{python}\nmean_vec = np.mean(scaled_data, axis=0)\ncov_mat = (scaled_data - mean_vec).T.dot((scaled_data - mean_vec)) / (scaled_data.shape[0]-1)\nprint('Covariance matrix \\n%s' %cov_mat)\n```\n\n# Eigenvalues and Eigenvectors\n\n```{python}\neig_vals, eig_vecs = np.linalg.eig(cov_mat)\n\nprint('\\nEigenvalues \\n%s' %eig_vals)\n```\n\n```{python}\neig_val_df = pd.DataFrame(eig_vals, columns=['Eigenvalue'])\neig_val_df\n```\n\n\n```{python}\nprint('Eigenvectors \\n%s' %eig_vecs)\n```\n\n# PCA Visualization \n\n```{python}\n# importing PCA module \nfrom sklearn.decomposition import PCA\npca = PCA (n_components=6)\npca.fit(scaled_data)\nx_pca = pca.transform(scaled_data)\n```\n\n\n## Scree Plot \n\n```{python}\nsns.set_style ('whitegrid')\nPC_values = np.arange(pca.n_components_) + 1\nplt.plot(PC_values, pca.explained_variance_ratio_, 'o-', linewidth=2, color='green')\nplt.title('Scree Plot')\nplt.xlim(0,7)\nplt.xlabel('Principal Component')\nplt.ylabel('Variance Explained')\nplt.xticks(ticks=range(1, 8, 1))  # Set the x-ticks with an interval of 1\nplt.show()\n```\n\n## Cumulative Variance Plot \n\n```{python}\nsns.set_style('whitegrid')\n# Plot the cumulative variance for each component\nplt.figure(figsize = (8, 4))\ncomponents = np.arange(1, 7, step=1)\nvariance = np.cumsum(pca.explained_variance_ratio_)\nplt.ylim(0.0,1.1)\nplt.plot(components, variance, marker='o', color='green')\n# plt.plot(components, variance, marker='o', linestyle='--', color='green')\n\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative variance (%)')\nplt.title('The number of components needed to explain variance')\nplt.show()\n```\n\n\n```{python}\npca.explained_variance_ratio_.sum()\n```\n\n\n```{python}\npca.get_covariance()\n```\n\n```{python}\nx_pca.shape\n```\n\n\n```{python}\nx_pca\n```\n\n\n```{python}\n# Convert to dataframe\ncomponent_names = [f\"PC{i+1}\" for i in range(x_pca.shape[1])]\nx_pca_df = pd.DataFrame(x_pca, columns=component_names)\n```\n\n```{python}\nx_pca_df.head()\n```\n\n\n```{python}\nloadings = pd.DataFrame(\n    pca.components_.T,  # transpose the matrix of loadings\n    columns=component_names,  # so the columns are the principal components\n    index=cancer.feature_names,  # and the rows are the original features\n)\n```\n\n```{python}\nloadings\n```\n\n\n```{python}\nsns.set_style('whitegrid')\nplt.figure(figsize=(12,8))\nplt.scatter(x_pca[:,0], x_pca[:,1],\n            c = cancer['target'], cmap='plasma')\nplt.xlabel('PCA1')\nplt.ylabel('PCA2')\nplt.show()\n```\n\n# Using Principal Component Scores for Other Machine Learning Algorithm\n\n```{python}\nx_pca_df2 = x_pca_df.copy()\nx_pca_df2['target'] = cancer.target # Adding the target variable with the PCA values \n```\n\n```{python}\nx_pca_df2.sample(5)\n```\n\n\n```{python}\nx_pca_df2['target'].value_counts()\n```\n\n```{python}\nfinal_df = x_pca_df2.copy()\n```\n\n\n```{python}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nlogreg = LogisticRegression()\n```\n\n\n```{python}\n# Feature and Target Vectors \nXlog = final_df.drop(['target'], axis=1)\nylog = final_df['target']\n```\n\n```{python}\n# Training and Testing Split \nXlog_train, Xlog_test, ylog_train, ylog_test = train_test_split(Xlog, ylog, test_size=0.20, random_state=420)\n```\n\n\n```{python}\nlogreg.fit(Xlog_train, ylog_train)\n```\n\n\n```{python}\nylog_predict = logreg.predict(Xlog_test)\n```\n\n\n```{python}\nfrom sklearn.metrics import accuracy_score\naccuracy_score(ylog_test, ylog_predict)\n```\n\n## Logistic Regression with Original Dataset\n\n```{python}\n# For original dataset \nXorg = cancer['data']\nyorg = cancer['target']\n\n\n# for original dataset \nXorg_train, Xorg_test, yorg_train, yorg_test = train_test_split(Xorg, yorg, test_size=0.20, random_state=500) # for original dataset \n\n\n# for original dataset \nlogreg.fit(Xorg_train, yorg_train)\n\n\n# for original dataset \nyorg_predict = logreg.predict(Xorg_test)\n```\n\n\n```{python}\n# for original dataset \naccuracy_score(yorg_test, yorg_predict)\n```\n\n\nThe accuracy score in original dataset is about 95%, which is less than principal component score result where accuracy is about 98%.\n\n# Conclusion \n\n\n","srcMarkdownNoYaml":"\n\n\n# Introduction \n\nThis document is prepared using `Quarto` in `RStudio`. The `Quarto` file (`.qmd`) can be converted to notebook (`.ipynb`) by running the code - `quarto convert filename.qmd` - in the terminal of `RStudio`. Similarly a Python `notebook` file (`.ipynb`) can be converted into `Quarto` (`.qmd`) by running the code - `quarto convert filename.ipynb` in the terminal of `RStudio`. More about the conversion can be found [here](!https://quarto.org/docs/tools/jupyter-lab.html).\n\n\nUseful Youtube video link for [PCA](https://www.youtube.com/watch?v=S51bTyIwxFs)\n\n# What is Principal Component Analysis (PCA)?\n\n\n\n# Working Directory\n\n```{python}\n#| eval: false\nimport os\nos.getcwd()\nfor files in os.listdir():\n  print(files)\n\n# Ignore Warnings \nimport warnings \nwarnings.filterwarnings('ignore')\n```\n\n# Loading Necessary `Python` Packages\n\n```{python}\n# For Data Manipulation & Analysis\nimport pandas as pd\nimport numpy as np\n# For visualization \nimport matplotlib.pyplot as plt \nimport seaborn as sns\n# For Machine Learning \nimport sklearn \n```\n\n# Loading Dataset\n\n```{python}\nfrom sklearn import datasets\ncancer = datasets.load_breast_cancer()\ndir(cancer)\ncancer.keys()\n```\n\n```{python}\ndf = pd.DataFrame(cancer.data, columns = cancer.feature_names)\ndf.head()\n```\n\n\n```{python}\ndf.shape\nprint (\"The number of rows and columns in the dataset is {} and {} respectively\".format(df.shape[0], df.shape[1]))\n```\n## Metadata of the Dataset \n\n```{python}\ndf.info()\n```\n\n```{python}\ndf.isnull().sum()\n```\n\n\n# Correlation of the variables \n\n```{python}\ncorrelation = df.corr()\nplt.figure(figsize=(20,17))\nsns.heatmap(correlation, vmax=1, square=True,annot=True,cmap='cubehelix')\nplt.title('Correlation between different features')\nplt.show()\n```\n\n# Preprocessing of the Dataset\n\n```{python}\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaled_data = scaler.fit_transform(df)\nscaled_df = pd.DataFrame(scaled_data, columns = cancer.feature_names)\nscaled_df.sample(5)\n```\n\n```{python}\nprint('The mean and standard deviation of  \\\nthe variable \"mean radius\" are {} and {} \\\nrespectively.'.format(round(scaled_df['mean radius'].mean(),4), round(scaled_df['mean radius'].std(),4)))\n```\n\n\n# Covariance Matrix\n\n\n```{python}\nmean_vec = np.mean(scaled_data, axis=0)\ncov_mat = (scaled_data - mean_vec).T.dot((scaled_data - mean_vec)) / (scaled_data.shape[0]-1)\nprint('Covariance matrix \\n%s' %cov_mat)\n```\n\n# Eigenvalues and Eigenvectors\n\n```{python}\neig_vals, eig_vecs = np.linalg.eig(cov_mat)\n\nprint('\\nEigenvalues \\n%s' %eig_vals)\n```\n\n```{python}\neig_val_df = pd.DataFrame(eig_vals, columns=['Eigenvalue'])\neig_val_df\n```\n\n\n```{python}\nprint('Eigenvectors \\n%s' %eig_vecs)\n```\n\n# PCA Visualization \n\n```{python}\n# importing PCA module \nfrom sklearn.decomposition import PCA\npca = PCA (n_components=6)\npca.fit(scaled_data)\nx_pca = pca.transform(scaled_data)\n```\n\n\n## Scree Plot \n\n```{python}\nsns.set_style ('whitegrid')\nPC_values = np.arange(pca.n_components_) + 1\nplt.plot(PC_values, pca.explained_variance_ratio_, 'o-', linewidth=2, color='green')\nplt.title('Scree Plot')\nplt.xlim(0,7)\nplt.xlabel('Principal Component')\nplt.ylabel('Variance Explained')\nplt.xticks(ticks=range(1, 8, 1))  # Set the x-ticks with an interval of 1\nplt.show()\n```\n\n## Cumulative Variance Plot \n\n```{python}\nsns.set_style('whitegrid')\n# Plot the cumulative variance for each component\nplt.figure(figsize = (8, 4))\ncomponents = np.arange(1, 7, step=1)\nvariance = np.cumsum(pca.explained_variance_ratio_)\nplt.ylim(0.0,1.1)\nplt.plot(components, variance, marker='o', color='green')\n# plt.plot(components, variance, marker='o', linestyle='--', color='green')\n\nplt.xlabel('Number of Components')\nplt.ylabel('Cumulative variance (%)')\nplt.title('The number of components needed to explain variance')\nplt.show()\n```\n\n\n```{python}\npca.explained_variance_ratio_.sum()\n```\n\n\n```{python}\npca.get_covariance()\n```\n\n```{python}\nx_pca.shape\n```\n\n\n```{python}\nx_pca\n```\n\n\n```{python}\n# Convert to dataframe\ncomponent_names = [f\"PC{i+1}\" for i in range(x_pca.shape[1])]\nx_pca_df = pd.DataFrame(x_pca, columns=component_names)\n```\n\n```{python}\nx_pca_df.head()\n```\n\n\n```{python}\nloadings = pd.DataFrame(\n    pca.components_.T,  # transpose the matrix of loadings\n    columns=component_names,  # so the columns are the principal components\n    index=cancer.feature_names,  # and the rows are the original features\n)\n```\n\n```{python}\nloadings\n```\n\n\n```{python}\nsns.set_style('whitegrid')\nplt.figure(figsize=(12,8))\nplt.scatter(x_pca[:,0], x_pca[:,1],\n            c = cancer['target'], cmap='plasma')\nplt.xlabel('PCA1')\nplt.ylabel('PCA2')\nplt.show()\n```\n\n# Using Principal Component Scores for Other Machine Learning Algorithm\n\n```{python}\nx_pca_df2 = x_pca_df.copy()\nx_pca_df2['target'] = cancer.target # Adding the target variable with the PCA values \n```\n\n```{python}\nx_pca_df2.sample(5)\n```\n\n\n```{python}\nx_pca_df2['target'].value_counts()\n```\n\n```{python}\nfinal_df = x_pca_df2.copy()\n```\n\n\n```{python}\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nlogreg = LogisticRegression()\n```\n\n\n```{python}\n# Feature and Target Vectors \nXlog = final_df.drop(['target'], axis=1)\nylog = final_df['target']\n```\n\n```{python}\n# Training and Testing Split \nXlog_train, Xlog_test, ylog_train, ylog_test = train_test_split(Xlog, ylog, test_size=0.20, random_state=420)\n```\n\n\n```{python}\nlogreg.fit(Xlog_train, ylog_train)\n```\n\n\n```{python}\nylog_predict = logreg.predict(Xlog_test)\n```\n\n\n```{python}\nfrom sklearn.metrics import accuracy_score\naccuracy_score(ylog_test, ylog_predict)\n```\n\n## Logistic Regression with Original Dataset\n\n```{python}\n# For original dataset \nXorg = cancer['data']\nyorg = cancer['target']\n\n\n# for original dataset \nXorg_train, Xorg_test, yorg_train, yorg_test = train_test_split(Xorg, yorg, test_size=0.20, random_state=500) # for original dataset \n\n\n# for original dataset \nlogreg.fit(Xorg_train, yorg_train)\n\n\n# for original dataset \nyorg_predict = logreg.predict(Xorg_test)\n```\n\n\n```{python}\n# for original dataset \naccuracy_score(yorg_test, yorg_predict)\n```\n\n\nThe accuracy score in original dataset is about 95%, which is less than principal component score result where accuracy is about 98%.\n\n# Conclusion \n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"chap09_pca.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.55","theme":"united","light":"flatly","linkcolor":"orangered","mainfont":"Georgia","title":"<center> Chapter # 09 <br> Dimension Reduction & PCA"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}